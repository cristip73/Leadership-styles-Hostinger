import streamlit as st
from utils.visualization import create_style_radar_chart, create_adequacy_gauge
from models.database import Database
from utils.scoring import AssessmentScorer
import uuid

if 'db' not in st.session_state:
    st.session_state.db = Database()

def display_style_interpretation(scorer, primary_style, secondary_style):
    st.write("### Management Style Analysis")
    
    st.write("#### Stil Principal:", primary_style)
    st.write(scorer.get_style_description(primary_style))
    st.write("""
    """)
    
    st.write("#### Stil Secundar:", secondary_style)
    st.write(scorer.get_style_description(secondary_style))
    st.write("""
    """)


def display_results(results):
    st.title("Your Assessment Results")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("### Management Style Scores")
        st.write(f"**Directiv:** {results['directiv_score']} points")
        st.write(f"**Persuasiv:** {results['persuasiv_score']} points")
        st.write(f"**Participativ:** {results['participativ_score']} points")
        st.write(f"**Delegativ:** {results['delegativ_score']} points")
        
        st.write("\n### Management Style Profile")
        radar_chart = create_style_radar_chart({
            'Directiv': results['directiv_score'],
            'Persuasiv': results['persuasiv_score'],
            'Participativ': results['participativ_score'],
            'Delegativ': results['delegativ_score']
        })
        st.plotly_chart(radar_chart, use_container_width=True)
    
    with col2:
        st.write("### Adequacy Score")
        gauge_chart = create_adequacy_gauge(results['adequacy_score'])
        st.plotly_chart(gauge_chart, use_container_width=True)
        
    # Detailed interpretations
    display_style_interpretation(AssessmentScorer(), results['primary_style'], results['secondary_style'])
    
    # Download results option
    st.download_button(
        label="Download Results PDF",
        data=f"""Management Style Assessment Results

Name: {results['first_name']} {results['last_name']}
Email: {results['email']}
Date: {results['created_at'].strftime('%Y-%m-%d %H:%M')}

Primary Style: {results['primary_style']}
Secondary Style: {results['secondary_style']}
Adequacy Score: {results['adequacy_score']}
Adequacy Level: {results['adequacy_level']}

Style Scores:
- Directiv: {results['directiv_score']} points
- Persuasiv: {results['persuasiv_score']} points
- Participativ: {results['participativ_score']} points
- Delegativ: {results['delegativ_score']} points

This report was generated by the Management Style Assessment tool.
        """,
        file_name="management_style_results.txt",
        mime="text/plain"
    )

def main():
    st.title("Assessment Results")
    
    # Check if results exist in session state
    if 'assessment_results' in st.session_state:
        results = st.session_state.db.get_user_results(st.session_state.assessment_results['user_id'])
        if results:
            display_results(results)
        else:
            st.error("Could not retrieve results. Please try the assessment again.")
            if st.button("Take Assessment", type="primary"):
                st.switch_page("pages/01_take_assessment.py")
    else:
        st.warning("Please complete the assessment to view your results")
        if st.button("Take Assessment", type="primary"):
            st.switch_page("pages/01_take_assessment.py")

if __name__ == "__main__":
    main()
