import streamlit as st
from utils.visualization import create_style_radar_chart, create_adequacy_gauge
from models.database import Database
from utils.scoring import AssessmentScorer
import uuid

if 'db' not in st.session_state:
    st.session_state.db = Database()

def display_style_interpretation(scorer, primary_style, secondary_style):
    st.write("### Management Style Analysis")
    
    st.write("#### Primary Style:", primary_style)
    st.write(scorer.get_style_description(primary_style))
    st.write("""
    This is your dominant management approach, reflecting your natural tendencies in leadership situations.
    You are most likely to use this style when facing familiar scenarios or when under pressure.
    """)
    
    st.write("#### Secondary Style:", secondary_style)
    st.write(scorer.get_style_description(secondary_style))
    st.write("""
    This is your backup management approach, which you tend to use when your primary style isn't effective.
    Having a strong secondary style indicates flexibility in your management approach.
    """)

def display_adequacy_interpretation(scorer, score, level):
    st.write("### Adequacy Analysis")
    
    st.write(f"#### Overall Score: {score}")
    st.write(f"#### Level: {level}")
    st.write(scorer.get_adequacy_description(score))
    
    st.write("### What This Means")
    if score >= 20:
        st.write("""
        - Excellent ability to adapt your management style to different situations
        - Strong understanding of when to use different leadership approaches
        - High effectiveness in various management scenarios
        """)
    elif score >= 10:
        st.write("""
        - Good basic understanding of situational leadership
        - Room for improvement in identifying the most effective approach
        - Consider developing greater flexibility in your management style
        """)
    else:
        st.write("""
        - Opportunity to develop more adaptable management approaches
        - Focus on recognizing different situations requiring different styles
        - Consider leadership development training or mentoring
        """)

def display_development_recommendations(score):
    st.write("### Development Recommendations")
    
    if score >= 20:
        st.write("""
        1. Share your expertise with others through mentoring
        2. Take on more complex leadership challenges
        3. Document your successful approaches for training others
        """)
    elif score >= 10:
        st.write("""
        1. Practice identifying situational cues that suggest different management approaches
        2. Seek feedback from team members about your management style
        3. Experiment with different leadership approaches in low-risk situations
        """)
    else:
        st.write("""
        1. Focus on developing awareness of different management situations
        2. Study the characteristics of different leadership styles
        3. Work with a mentor to improve your situational awareness
        4. Practice adapting your style in controlled situations
        """)

def display_results(results):
    st.title("Your Assessment Results")
    
    scorer = AssessmentScorer()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("### Management Style Profile")
        radar_chart = create_style_radar_chart(
            results['primary_style'],
            results['secondary_style']
        )
        st.plotly_chart(radar_chart, use_container_width=True)
    
    with col2:
        st.write("### Adequacy Score")
        gauge_chart = create_adequacy_gauge(results['adequacy_score'])
        st.plotly_chart(gauge_chart, use_container_width=True)
    
    # Detailed interpretations
    display_style_interpretation(scorer, results['primary_style'], results['secondary_style'])
    display_adequacy_interpretation(scorer, results['adequacy_score'], results['adequacy_level'])
    display_development_recommendations(results['adequacy_score'])
    
    # Download results option
    st.download_button(
        label="Download Results PDF",
        data=f"""Management Style Assessment Results

Name: {results['first_name']} {results['last_name']}
Email: {results['email']}
Date: {results['created_at'].strftime('%Y-%m-%d %H:%M')}

Primary Style: {results['primary_style']}
Secondary Style: {results['secondary_style']}
Adequacy Score: {results['adequacy_score']}
Adequacy Level: {results['adequacy_level']}

This report was generated by the Management Style Assessment tool.
        """,
        file_name="management_style_results.txt",
        mime="text/plain"
    )

def main():
    st.title("Assessment Results")
    
    user_id = st.query_params.get('user_id', None)
    
    if user_id:
        try:
            results = st.session_state.db.get_user_results(uuid.UUID(user_id))
            if results:
                display_results(results)
            else:
                st.error("Results not found. Please complete the assessment first.")
        except ValueError:
            st.error("Invalid result URL. Please use the link provided after completing the assessment.")
    else:
        st.warning("Please complete the assessment to view your results")
        if st.button("Take Assessment", type="primary"):
            st.switch_page("pages/01_take_assessment.py")

if __name__ == "__main__":
    main()
